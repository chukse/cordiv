)
}
for(pdb in levels(res_prop_elj$pdb))
{
counter = counter + 1
pdb_elj    = res_prop_elj[res_prop_elj$pdb==pdb,] # c('seqent','ddgent')]
pdb_hps    = res_prop_hps[res_prop_hps$pdb==pdb,] # c('hpskd','hpsww','hpshh')] )
pdb_dssp   = res_prop_dssp[res_prop_dssp$pdb==pdb,] # c('asa','rsa','hbe_mean','rss')] )
pdb_wcn_bf = res_prop_wcn_bf[res_prop_wcn_bf$pdb==pdb, ] #c('asa','rsa','hbe_mean','rss')] )
pdb = cbind( pdb_elj$pdb,
pdb_elj$seqent,
pdb_elj$ddgent,
pdb_hps$hpskd,
pdb_hps$hpsww,
pdb_hps$hpshh,
pdb_dssp$asa,
pdb_dssp$rsa,
pdb_dssp$hbe_mean,
subset(pdb_wcn_bf, select = -c(pdb,resnam,resnum))
)
}
View(pdb)
for(pdb in levels(res_prop_elj$pdb))
{
counter = counter + 1
pdb_elj    = res_prop_elj[res_prop_elj$pdb==pdb,] # c('seqent','ddgent')]
pdb_hps    = res_prop_hps[res_prop_hps$pdb==pdb,] # c('hpskd','hpsww','hpshh')] )
pdb_dssp   = res_prop_dssp[res_prop_dssp$pdb==pdb,] # c('asa','rsa','hbe_mean','rss')] )
pdb_wcn_bf = res_prop_wcn_bf[res_prop_wcn_bf$pdb==pdb, ] #c('asa','rsa','hbe_mean','rss')] )
pdb = cbind( pdb      = pdb_elj$pdb,
seqent   = pdb_elj$seqent,
ddgent   = pdb_elj$ddgent,
hpskd    = pdb_hps$hpskd,
hpsww    = pdb_hps$hpsww,
hpshh    = pdb_hps$hpshh,
asa      = pdb_dssp$asa,
rsa      = pdb_dssp$rsa,
hbe_mean = pdb_dssp$hbe_mean,
subset(pdb_wcn_bf, select = -c(pdb,resnam,resnum))
)
}
View(pdb)
View(pdb_elj)
View(pdb_wcn_bf)
ss = factor(res_prop_dssp$rss)
ss
levels(ss)
for(pdb in levels(res_prop_elj$pdb))
{
counter = counter + 1
pdb_elj    = res_prop_elj[res_prop_elj$pdb==pdb,] # c('seqent','ddgent')]
pdb_hps    = res_prop_hps[res_prop_hps$pdb==pdb,] # c('hpskd','hpsww','hpshh')] )
pdb_dssp   = res_prop_dssp[res_prop_dssp$pdb==pdb,] # c('asa','rsa','hbe_mean','rss')] )
pdb_wcn_bf = res_prop_wcn_bf[res_prop_wcn_bf$pdb==pdb, ] #c('asa','rsa','hbe_mean','rss')] )
pdb = cbind( subset(pdb_elj, select = c(pdb,seqent,ddgent)),
subset(pdb_hps, select = c(hpskd,hpsww,hpshh)),
subset(pdb_dssp, select = c(asa,rsa,hpshh,hbe_mean)),
subset(pdb_wcn_bf, select = -c(pdb,resnam,resnum))
)
}
res_prop_elj         = read.table('../../elj_pdb_entropies.in', header=T)
res_prop_elj$pdb     = factor(res_prop_elj$pdb)
res_prop_hps         = read.table('../../properties/res_prop_hps.out', header=T)
res_prop_hps$pdb     = factor(res_prop_hps$pdb)
res_prop_dssp        = read.table('../../properties/res_prop_dssp.out', header=T)
res_prop_dssp$pdb    = factor(res_prop_dssp$pdb)
res_prop_wcn_bf      = read.table('../../properties/res_prop_wcn_bf.out', header=T)
pdb_prop = data.frame()    # This dataframe will contain the mean median and variance of sequqence entropy and ddG entropy for each pdb file.
res_prop_wcn_bf$pdb  = factor(res_prop_wcn_bf$pdb)
counter = 0
for(pdb in levels(res_prop_elj$pdb))
{
counter = counter + 1
for(pdb in levels(res_prop_elj$pdb))
{
counter = counter + 1
pdb_elj    = res_prop_elj[res_prop_elj$pdb==pdb,] # c('seqent','ddgent')]
pdb_hps    = res_prop_hps[res_prop_hps$pdb==pdb,] # c('hpskd','hpsww','hpshh')] )
pdb_dssp   = res_prop_dssp[res_prop_dssp$pdb==pdb,] # c('asa','rsa','hbe_mean','rss')] )
pdb_wcn_bf = res_prop_wcn_bf[res_prop_wcn_bf$pdb==pdb, ] #c('asa','rsa','hbe_mean','rss')] )
pdb = cbind( subset(pdb_elj, select = c(pdb,seqent,ddgent)),
subset(pdb_hps, select = c(hpskd,hpsww,hpshh)),
subset(pdb_dssp, select = c(asa,rsa,hpshh,hbe_mean)),
subset(pdb_wcn_bf, select = -c(pdb,resnam,resnum))
)
}
for(pdb in levels(res_prop_elj$pdb))
{
counter = counter + 1
pdb_elj    = res_prop_elj[res_prop_elj$pdb==pdb,] # c('seqent','ddgent')]
pdb_hps    = res_prop_hps[res_prop_hps$pdb==pdb,] # c('hpskd','hpsww','hpshh')] )
pdb_dssp   = res_prop_dssp[res_prop_dssp$pdb==pdb,] # c('asa','rsa','hbe_mean','rss')] )
pdb_wcn_bf = res_prop_wcn_bf[res_prop_wcn_bf$pdb==pdb, ] #c('asa','rsa','hbe_mean','rss')] )
pdb = cbind( subset(pdb_elj, select = c(pdb,seqent,ddgent)),
subset(pdb_hps, select = c(hpskd,hpsww,hpshh)),
subset(pdb_dssp, select = c(asa,rsa,hpshh,hbe_mean)),
subset(pdb_wcn_bf, select = -c(pdb,resnam,resnum))
)
}
for(pdb in levels(res_prop_elj$pdb))
{
counter = counter + 1
pdb_elj    = res_prop_elj[res_prop_elj$pdb==pdb,] # c('seqent','ddgent')]
pdb_hps    = res_prop_hps[res_prop_hps$pdb==pdb,] # c('hpskd','hpsww','hpshh')] )
pdb_wcn_bf = res_prop_wcn_bf[res_prop_wcn_bf$pdb==pdb, ] #c('asa','rsa','hbe_mean','rss')] )
pdb_dssp   = res_prop_dssp[res_prop_dssp$pdb==pdb,] # c('asa','rsa','hbe_mean','rss')] )
pdb = cbind( subset(pdb_elj, select = c(pdb,seqent,ddgent)),
#subset(pdb_hps, select = c(hpskd,hpsww,hpshh)),
subset(pdb_dssp, select = c(asa,rsa,hpshh,hbe_mean)),
subset(pdb_wcn_bf, select = -c(pdb,resnam,resnum))
)
}
for(pdb in levels(res_prop_elj$pdb))
{
counter = counter + 1
pdb_elj    = res_prop_elj[res_prop_elj$pdb==pdb,] # c('seqent','ddgent')]
pdb_hps    = res_prop_hps[res_prop_hps$pdb==pdb,] # c('hpskd','hpsww','hpshh')] )
pdb_dssp   = res_prop_dssp[res_prop_dssp$pdb==pdb,] # c('asa','rsa','hbe_mean','rss')] )
pdb_wcn_bf = res_prop_wcn_bf[res_prop_wcn_bf$pdb==pdb, ] #c('asa','rsa','hbe_mean','rss')] )
pdb = cbind( subset(pdb_elj, select = c(pdb,seqent,ddgent)),
subset(pdb_hps, select = c(hpskd,hpsww,hpshh)),
subset(pdb_dssp, select = c(asa,rsa,hbe_mean)),
subset(pdb_wcn_bf, select = -c(pdb,resnam,resnum))
)
}
?reshape
for(pdb in levels(res_prop_elj$pdb))
{
counter = counter + 1
pdb_elj    = res_prop_elj[res_prop_elj$pdb==pdb,] # c('seqent','ddgent')]
pdb_hps    = res_prop_hps[res_prop_hps$pdb==pdb,] # c('hpskd','hpsww','hpshh')] )
pdb_dssp   = res_prop_dssp[res_prop_dssp$pdb==pdb,] # c('asa','rsa','hbe_mean','rss')] )
pdb_wcn_bf = res_prop_wcn_bf[res_prop_wcn_bf$pdb==pdb, ] #c('asa','rsa','hbe_mean','rss')] )
pdb = cbind( subset(pdb_elj, select = c(seqent,ddgent)),
subset(pdb_hps, select = c(hpskd,hpsww,hpshh)),
subset(pdb_dssp, select = c(asa,rsa,hbe_mean)),
subset(pdb_wcn_bf, select = -c(pdb,resnam,resnum))
)
}
View(pdb)
pdb_long = reshape(pdb)
View(res_prop_elj)
View(res_prop_wcn_bf)
View(res_prop_elj)
pdb_long = reshape(pdb, id = row.names(pdb))
pdb_long = reshape(pdb, ids = row.names(pdb))
pdb_long = reshape(pdb,
v.names = 'value',
timevar = 'variable',
times = col.names(pdb),
direction = 'long)'
)
pdb_long = reshape(pdb,col.names(pdb)
col.names(pdb)
colnames(pdb)
pdb_long = reshape(pdb, varying = colnames(pdb), v.names = 'value', timevar = 'variable', times = colnames(pdb), direction = 'long')
View(pdb_long
)()
pdb_long = reshape(pdb, varying = colnames(pdb), v.names = 'value', timevar = 'variable', times = colnames(pdb), direction = 'long', id = rownames(pdb))
pdb_long = reshape(pdb, varying = colnames(pdb), v.names = 'value', timevar = 'variable', times = colnames(pdb), direction = 'long', idvar = rownames(pdb))
rownames(pdb)
pdb_long = reshape(pdb, varying = colnames(pdb), v.names = 'value', timevar = 'variable', times = colnames(pdb), direction = 'long', ids = rownames(pdb))
View(pdb_long)
pdb_long = reshape(pdb, ids = rownames(pdb), varying = colnames(pdb), v.names = 'value', timevar = 'variable', times = colnames(pdb), direction = 'long')
pdb_long$variable = factor(pdb_long$variable)
for variable1 in levels(pdb_long$variable)
{
for variable2 in levels(pdb_long$variable)
for (variable1 in levels(pdb_long$variable))
{
for (variable2 in levels(pdb_long$variable))
if ( variable1 != variable2)
{
x = cor.test( pdb_long$variable1, pdb_long$variable2, method='spearman', na.action="na.omit" )
r = x$estimate
p = x$p.value
row = data.frame(pdb = pdb, variable = paste('r.',variable1,'.',variable2), value = r)
pdb_prop = rbind(pdb_prop,row)
}
}
pdb_long$variable = factor(pdb_long$variable)
for (variable1 in levels(pdb_long$variable))
{
var1 = pdb_long$variable[pdb_long$variable = variable1,]
for (variable2 in levels(pdb_long$variable))
if ( variable1 != variable2)
{
var2 = pdb_long$variable[pdb_long$variable = variable1,]
x = cor.test( var1$value, var2$value, method='spearman', na.action="na.omit" )
r = x$estimate
p = x$p.value
row = data.frame(pdb = pdb, variable = paste('r.',variable1,'.',variable2), value = r)
pdb_prop = rbind(pdb_prop,row)
}
}
}
View(pdb_prop)
View(pdb_prop)
pdb_long = reshape(pdb, ids = rownames(pdb), varying = colnames(pdb), v.names = 'value', timevar = 'variable', times = colnames(pdb), direction = 'long')
pdb_long$variable = factor(pdb_long$variable)
variable
variable1
variable2
var1
for (variable1 in levels(pdb_long$variable))
{
var1 = pdb_long$variable[pdb_long$variable == variable1,]
for (variable2 in levels(pdb_long$variable))
if ( variable1 != variable2)
{
var2 = pdb_long$variable[pdb_long$variable == variable1,]
x = cor.test( var1$value, var2$value, method='spearman', na.action="na.omit" )
r = x$estimate
p = x$p.value
row = data.frame(pdb = pdb, variable = paste('r.',variable1,'.',variable2), value = r)
pdb_prop_long = rbind(pdb_prop,row)
}
}
pdb_prop = data.frame()    # This dataframe will contain the mean median and variance of sequqence entropy and ddG entropy for each pdb file.
counter = 0
pdb_long = reshape(pdb, ids = rownames(pdb), varying = colnames(pdb), v.names = 'value', timevar = 'variable', times = colnames(pdb), direction = 'long')
pdb_long$variable = factor(pdb_long$variable)
for (variable1 in levels(pdb_long$variable))
{
var1 = pdb_long$variable[pdb_long$variable == variable1,]
for (variable2 in levels(pdb_long$variable))
if ( variable1 != variable2)
{
var2 = pdb_long$variable[pdb_long$variable == variable1,]
x = cor.test( var1$value, var2$value, method='spearman', na.action="na.omit" )
r = x$estimate
p = x$p.value
row = data.frame(pdb = pdb, variable = paste('r.',variable1,'.',variable2), value = r)
pdb_prop_long = rbind(pdb_prop,row)
}
}
var1 = pdb_long$variable[pdb_long$variable == variable1,]
for (variable1 in levels(pdb_long$variable))
{
var1 = pdb_long$variable[pdb_long$variable == variable1,]
}
pdb_prop = data.frame()    # This dataframe will contain the mean median and variance of sequqence entropy and ddG entropy for each pdb file.
pdb_long = reshape(pdb, ids = rownames(pdb), varying = colnames(pdb), v.names = 'value', timevar = 'variable', times = colnames(pdb), direction = 'long')
pdb_long$variable = factor(pdb_long$variable)
for (variable1 in levels(pdb_long$variable))
{
var1 = pdb_long$[pdb_long$variable == variable1,]
}
for (variable1 in levels(pdb_long$variable))
{
var1 = pdb_long[pdb_long$variable == variable1,]
}
for (variable2 in levels(pdb_long$variable))
if ( variable1 != variable2)
{
var2 = pdb_long[pdb_long$variable == variable2,]
x = cor.test( var1$value, var2$value, method='spearman', na.action="na.omit" )
r = x$estimate
p = x$p.value
row = data.frame(pdb = pdb, variable = paste('r.',variable1,'.',variable2), value = r)
pdb_prop_long = rbind(pdb_prop,row)
}
}
View(pdb_prop_long)
pdb_prop_long = data.frame()    # This dataframe will contain the mean median and variance of sequqence entropy and ddG entropy for each pdb file.
pdb_long = reshape(pdb, ids = rownames(pdb), varying = colnames(pdb), v.names = 'value', timevar = 'variable', times = colnames(pdb), direction = 'long')
pdb_long$variable = factor(pdb_long$variable)
for (variable1 in levels(pdb_long$variable))
{
var1 = pdb_long[pdb_long$variable == variable1,]
}
for (variable2 in levels(pdb_long$variable))
if ( variable1 != variable2)
{
var2 = pdb_long[pdb_long$variable == variable2,]
x = cor.test( var1$value, var2$value, method='spearman', na.action="na.omit" )
r = x$estimate
p = x$p.value
row = data.frame(pdb = pdb, variable = paste('r.',variable1,'.',variable2), value = r)
pdb_prop_long = rbind(pdb_prop_long,row)
}
}
View(pdb_prop_long)
pdb_prop = data.frame()    # This dataframe will contain the mean median and variance of sequqence entropy and ddG entropy for each pdb file.
pdb_prop_long = data.frame()    # This dataframe will contain the mean median and variance of sequqence entropy and ddG entropy for each pdb file.
View(pdb_prop_long)
pdb_long = reshape(pdb, ids = rownames(pdb), varying = colnames(pdb), v.names = 'value', timevar = 'variable', times = colnames(pdb), direction = 'long')
pdb_long$variable = factor(pdb_long$variable)
for (variable1 in levels(pdb_long$variable))
{
var1 = pdb_long[pdb_long$variable == variable1,]
for (variable2 in levels(pdb_long$variable))
if ( variable1 != variable2)
{
var2 = pdb_long[pdb_long$variable == variable2,]
x = cor.test( var1$value, var2$value, method='spearman', na.action="na.omit" )
r = x$estimate
p = x$p.value
row = data.frame(pdb = pdb, variable = paste('r.',variable1,'.',variable2), value = r)
pdb_prop_long = rbind(pdb_prop_long,row)
}
}
pdb_prop = data.frame()    # This dataframe will contain the mean median and variance of sequqence entropy and ddG entropy for each pdb file.
pdb_prop_long = data.frame()    # This dataframe will contain the mean median and variance of sequqence entropy and ddG entropy for each pdb file.
counter = 0
pdb_long = reshape(pdb, ids = rownames(pdb), varying = colnames(pdb), v.names = 'value', timevar = 'variable', times = colnames(pdb), direction = 'long')
pdb_long$variable = factor(pdb_long$variable)
for (variable1 in levels(pdb_long$variable))
{
var1 = pdb_long[pdb_long$variable == variable1,]
for (variable2 in levels(pdb_long$variable))
{
if ( variable1 != variable2)
{
var2 = pdb_long[pdb_long$variable == variable2,]
x = cor.test( var1$value, var2$value, method='spearman', na.action="na.omit" )
r = x$estimate
p = x$p.value
row = data.frame(pdb = pdb, variable = paste('r.',variable1,'.',variable2), value = r)
pdb_prop_long = rbind(pdb_prop_long,row)
}
}
}
View(pdb_prop_long)
View(pdb)
View(pdb_long)
for (variable1 in levels(pdb_long$variable))
{
cat (variable1)
}
for (variable1 in levels(pdb_long$variable))
{
cat (variable1)
var1 = pdb_long$variable[pdb_long$variable = variable1,]
for (variable1 in levels(pdb_long$variable))
{
cat (variable1)
var1 = pdb_long$variable[pdb_long$variable == variable1,]
}
for (variable1 in levels(pdb_long$variable))
{
cat (variable1, '\n')}
View(pdb_long)
for (variable1 in levels(pdb_long$variable))
{
cat (variable1, '\n')
var1 = pdb_long[pdb_long$variable == variable1,]
}
View(var1)
pdb_prop_long = data.frame()    # This dataframe will contain the mean median and variance of sequqence entropy and ddG entropy for each pdb file.
pdb_long = reshape(pdb, ids = rownames(pdb), varying = colnames(pdb), v.names = 'value', timevar = 'variable', times = colnames(pdb), direction = 'long')
pdb_long$variable = factor(pdb_long$variable)
for (variable1 in levels(pdb_long$variable))
{
#cat (variable1, '\n')
var1 = pdb_long[pdb_long$variable == variable1,]
for (variable2 in levels(pdb_long$variable))
{
if ( variable1 != variable2)
{
var2 = pdb_long[pdb_long$variable = variable2,]
x = cor.test( var1$value, var2$value, method='spearman', na.action="na.omit" )
pdb_long = reshape(pdb, ids = rownames(pdb), varying = colnames(pdb), v.names = 'value', timevar = 'variable', times = colnames(pdb), direction = 'long')
pdb_long$variable = factor(pdb_long$variable)
for (variable1 in levels(pdb_long$variable))
{
#cat (variable1, '\n')
var1 = pdb_long[pdb_long$variable == variable1,]
for (variable2 in levels(pdb_long$variable))
{
if ( variable1 != variable2)
{
var2 = pdb_long[pdb_long$variable == variable2,]
x = cor.test( var1$value, var2$value, method='spearman', na.action="na.omit" )
r = x$estimate
p = x$p.value
row = data.frame(pdb = pdb, variable = paste('r.',variable1,'.',variable2), value = r)
pdb_prop_long = rbind(pdb_prop,row)
}
}
}
View(pdb_prop_long)
pdb_prop_long = data.frame()    # This dataframe will contain the mean median and variance of sequqence entropy and ddG entropy for each pdb file.
counter = 0
for (variable1 in levels(pdb_long$variable))
{
#cat (variable1, '\n')
var1 = pdb_long[pdb_long$variable == variable1,]
for (variable2 in levels(pdb_long$variable))
{
if ( variable1 != variable2)
{
var2 = pdb_long[pdb_long$variable == variable2,]
x = cor.test( var1$value, var2$value, method='spearman', na.action="na.omit" )
r = x$estimate
p = x$p.value
row = data.frame(pdb = pdb, variable = paste('r.',variable1,'.',variable2), value = r)
pdb_prop_long = rbind(pdb_prop_long,row)
}
}
}
View(var1)
View(var2)
x = cor.test( var1$value, var2$value, method='spearman', na.action="na.omit" )
r = x$estimate
p = x$p.value
r
row = data.frame(pdb = pdb, variable = paste('r.',variable1,'.',variable2), value = r)
row
row = data.frame(pdb = pdb$pdb, variable = paste('r.',variable1,'.',variable2), value = r)
r
variable = paste('r.',variable1,'.',variable2)
variable
variable = paste0('r.',variable1,'.',variable2)
variable
pdb$pdb
for(pdb in levels(res_prop_elj$pdb))
{
counter = counter + 1
cat( str(counter), pdb )
pdb_elj    = res_prop_elj[res_prop_elj$pdb==pdb,] # c('seqent','ddgent')]
pdb_hps    = res_prop_hps[res_prop_hps$pdb==pdb,] # c('hpskd','hpsww','hpshh')] )
pdb_dssp   = res_prop_dssp[res_prop_dssp$pdb==pdb,] # c('asa','rsa','hbe_mean','rss')] )
pdb_wcn_bf = res_prop_wcn_bf[res_prop_wcn_bf$pdb==pdb, ] #c('asa','rsa','hbe_mean','rss')] )
pdb_temp = cbind( subset(pdb_elj, select = c(seqent,ddgent)),
subset(pdb_hps, select = c(hpskd,hpsww,hpshh)),
subset(pdb_dssp, select = c(asa,rsa,hbe_mean)),
subset(pdb_wcn_bf, select = -c(pdb,resnam,resnum))
)
}
for(pdb in levels(res_prop_elj$pdb))
{
counter = counter + 1
cat( pdb, str(counter), '\n' )
pdb_elj    = res_prop_elj[res_prop_elj$pdb==pdb,] # c('seqent','ddgent')]
pdb_hps    = res_prop_hps[res_prop_hps$pdb==pdb,] # c('hpskd','hpsww','hpshh')] )
pdb_dssp   = res_prop_dssp[res_prop_dssp$pdb==pdb,] # c('asa','rsa','hbe_mean','rss')] )
pdb_wcn_bf = res_prop_wcn_bf[res_prop_wcn_bf$pdb==pdb, ] #c('asa','rsa','hbe_mean','rss')] )
pdb_temp = cbind( subset(pdb_elj, select = c(seqent,ddgent)),
subset(pdb_hps, select = c(hpskd,hpsww,hpshh)),
subset(pdb_dssp, select = c(asa,rsa,hbe_mean)),
subset(pdb_wcn_bf, select = -c(pdb,resnam,resnum))
)
}
for(pdb in levels(res_prop_elj$pdb))
{
counter = counter + 1
cat( paste(pdb, str(counter), '\n') )
pdb_elj    = res_prop_elj[res_prop_elj$pdb==pdb,] # c('seqent','ddgent')]
pdb_hps    = res_prop_hps[res_prop_hps$pdb==pdb,] # c('hpskd','hpsww','hpshh')] )
pdb_dssp   = res_prop_dssp[res_prop_dssp$pdb==pdb,] # c('asa','rsa','hbe_mean','rss')] )
pdb_wcn_bf = res_prop_wcn_bf[res_prop_wcn_bf$pdb==pdb, ] #c('asa','rsa','hbe_mean','rss')] )
pdb_temp = cbind( subset(pdb_elj, select = c(seqent,ddgent)),
subset(pdb_hps, select = c(hpskd,hpsww,hpshh)),
subset(pdb_dssp, select = c(asa,rsa,hbe_mean)),
subset(pdb_wcn_bf, select = -c(pdb,resnam,resnum))
)
}
counter = 0
for(pdb in levels(res_prop_elj$pdb))
{
counter = counter + 1
cat( paste(str(counter),pdb) )
pdb_elj    = res_prop_elj[res_prop_elj$pdb==pdb,] # c('seqent','ddgent')]
pdb_hps    = res_prop_hps[res_prop_hps$pdb==pdb,] # c('hpskd','hpsww','hpshh')] )
pdb_dssp   = res_prop_dssp[res_prop_dssp$pdb==pdb,] # c('asa','rsa','hbe_mean','rss')] )
pdb_wcn_bf = res_prop_wcn_bf[res_prop_wcn_bf$pdb==pdb, ] #c('asa','rsa','hbe_mean','rss')] )
pdb_temp = cbind( subset(pdb_elj, select = c(seqent,ddgent)),
subset(pdb_hps, select = c(hpskd,hpsww,hpshh)),
subset(pdb_dssp, select = c(asa,rsa,hbe_mean)),
subset(pdb_wcn_bf, select = -c(pdb,resnam,resnum))
)
}
pdb_long = reshape(pdb_temp, ids = rownames(pdb), varying = colnames(pdb), v.names = 'value', timevar = 'variable', times = colnames(pdb), direction = 'long')
pdb_long = reshape(pdb_temp, ids = rownames(pdb_temp), varying = colnames(pdb_temp), v.names = 'value', timevar = 'variable', times = colnames(pdb_temp), direction = 'long')
pdb_long$variable = factor(pdb_long$variable)
for (variable1 in levels(pdb_long$variable))
{
#cat (variable1, '\n')
var1 = pdb_long[pdb_long$variable == variable1,]
for (variable2 in levels(pdb_long$variable))
{
if ( variable1 != variable2)
{
var2 = pdb_long[pdb_long$variable == variable2,]
x = cor.test( var1$value, var2$value, method='spearman', na.action="na.omit" )
r = x$estimate
p = x$p.value
row = data.frame(pdb = pdb$pdb, variable = paste0('r.',variable1,'.',variable2), value = r)
pdb_prop_long = rbind(pdb_prop_long,row)
}
}
}
pdb_prop_long = data.frame()    # This dataframe will contain the mean median and variance of sequqence entropy and ddG entropy for each pdb file.
for (variable1 in levels(pdb_long$variable))
{
#cat (variable1, '\n')
var1 = pdb_long[pdb_long$variable == variable1,]
for (variable2 in levels(pdb_long$variable))
{
if ( variable1 != variable2)
{
var2 = pdb_long[pdb_long$variable == variable2,]
x = cor.test( var1$value, var2$value, method='spearman', na.action="na.omit" )
r = x$estimate
p = x$p.value
row = data.frame(pdb, variable = paste0('r.',variable1,'.',variable2), value = r)
pdb_prop_long = rbind(pdb_prop_long,row)
}
}
}
View(pdb_prop_long)
